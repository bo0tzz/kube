apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: acars
  namespace: radio
spec:
  interval: 15m
  chart:
    spec:
      chart: app-template
      version: "4.0.1"
      sourceRef:
        kind: HelmRepository
        name: bjw-s-charts
        namespace: radio
  values:

    controllers:
      acarsdec:
        replicas: 0
        containers:
          acarsdec:
            image:
              repository: ghcr.io/sdr-enthusiasts/docker-acarsdec
              tag: latest-build-412
            env:
              FEED_ID: BO0TZZ-ACARS-1
              TZ: Europe/Amsterdam
              SOAPYSDR: driver=rtlsdr
              # FREQUENCIES: "131.550;131.725"
              # Enabling all frequencies to determine which are actually used
              # RTL-SDR can only scan 2MHz range
              # See https://app.airframes.io/about
              FREQUENCIES: >-
                130.025;130.425;130.450;130.825;130.850;131.125;131.425;
                131.450;131.475;131.525;131.550;131.725;131.825;131.850
              OUTPUT_SERVER: acars-acarsrouter
              OUTPUT_SERVER_PORT: "5550"
              OUTPUT_SERVER_MODE: tcp
            resources:
              requests:
                cpu: 150m
                memory: 128Mi
              limits:
                memory: 256Mi
                squat.ai/rtlsdr: 1

      dumpvdl2:
        replicas: 1
        containers:
          dumpvdl2:
            securityContext:
              privileged: true
            image:
              repository: ghcr.io/sdr-enthusiasts/docker-dumpvdl2
              tag: latest-build-348
            env:
              FEED_ID: BO0TZZ-VDL2-1
              TZ: Etc/UTC
              SOAPYSDR: driver=rtlsdr
              FREQUENCIES: "136.675;136.725;136.775;136.825;136.875;136.975"
              ZMQ_MODE: server
              ZMQ_ENDPOINT: tcp://0.0.0.0:45555
            resources:
              requests:
                cpu: 10m
                memory: 128Mi
              limits:
                memory: 256Mi
                squat.ai/rtlsdr: 1

      acarsrouter:
        replicas: 1
        containers:
          acarsrouter:
            image:
              repository: ghcr.io/sdr-enthusiasts/acars_router
              tag: 1.3.1_linux_amd64
            env:
              TZ: Etc/UTC
              AR_SEND_UDP_ACARS: acars-acarshub:5550;feedthe.acarsdrama.com:5550
              AR_SEND_UDP_VDLM2: acars-acarshub:5555;feedthe.acarsdrama.com:5555
              AR_RECV_ZMQ_VDLM2: acars-dumpvdl2:45555
            resources:
              requests:
                cpu: 10m
                memory: 128Mi
              limits:
                memory: 256Mi

      acarshub:
        replicas: 1
        type: statefulset
        containers:
          acarshub:
            image:
              repository: ghcr.io/sdr-enthusiasts/docker-acarshub
              tag: v3.8.0Build1379_nohealthcheck
            env:
              TZ: Europe/Amsterdam
              ENABLE_ADSB: "false"
              # ENABLE_ACARS: external
              ENABLE_VDLM: external
              QUIET_MESSAGES: "false" # This logs the messages themselves
            resources:
              requests:
                cpu: 10m
                memory: 128Mi
              limits:
                memory: 512Mi

    persistence:
      acarshub:
        enabled: true
        storageClass: zfs-iscsi
        size: 2Gi
        accessMode: ReadWriteOnce
        advancedMounts:
          acarshub:
            acarshub:
              - path: /run/acars
    service:
      acarsrouter:
        controller: acarsrouter
        type: ClusterIP
        ports:
          router:
            port: 5550
      dumpvdl2:
        controller: dumpvdl2
        type: ClusterIP
        ports:
          vdl:
            port: 45555
      acarshub:
        controller: acarshub
        type: ClusterIP
        ports:
          http:
            port: 80
          acarsinput:
            port: 5550
            protocol: UDP
          vdslinput:
            port: 5555
            protocol: UDP
          acarsoutput:
            port: 15550
          vdsloutput:
            port: 15555

    ingress:
      acarshub:
        annotations:
          kubernetes.io/ingress.class: nginx
          cert-manager.io/cluster-issuer: letsencrypt-prod
          external-dns.alpha.kubernetes.io/target: bo0tzz.me
        hosts:
          - host: &host "acars.bo0tzz.me"
            paths:
              - path: /
                pathType: Prefix
                service:
                  identifier: acarshub
                  port: 80
        tls:
          - hosts:
              - *host
            secretName: *host
